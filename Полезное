Java RX
Java specification

Работа с БД из scheduler, а не из основного потока

Работать с БД не DAO, а Repository

Паттерн Observer

Образить архитектуру кода схематично

public class MyAlgorithm {

    public void execute(int a, int b) {
        getEvent()
                .doOnNext(System.out::println)
                .subscribeOn(Schedulers.io())
                .observeOn(Schedulers.io())
                .flatMapCompletable(this::save)
                .subscribe();
    }

    private Completable save(List<String> list) {
        return Completable.complete();
    }

    private Observable<List<String>> getEvent() {
        return
    }

    10.10.2020
    Builder/Strategy/Factory/что-нибудь - для реализации NextEvent.
    В зависимости от числа событий для выбора строить объекты с разным числом полей классов.

    public class Question {

        private String title;
        private List<Answer> answers;

        public Question(String title, List<Answer> answers) {
            this.title = title;
            this.answers = answers;
        }

        public List<Answer> getAnswers() {
            return answers;
        }

        @Override
        public String toString() {
            StringBuilder builder = new StringBuilder();
            builder.append(title).append("\n");
            for (int i = 0; i < answers.size(); i++) {
                builder.append(i).append(1).append(" - ").append(answers.get(i).toString()).append("\n");
            }
            return builder.toString();
        }
    }
    package com.company.victorina;

    import java.util.Optional;

    public class Answer {

        private final int id;
        private final String title;
        private final Optional<Question> next;

        public Answer(int id, String title, Question next) {
            this.id = id;
            this.title = title;
            this.next = Optional.of(next);
        }

        public int getId() {
            return id;
        }

        public String getTitle() {
            return title;
        }

        public Optional<Question> getNext() {
            return next;
        }

        @Override
        public String toString() {
            return title;
        }
    }
    package com.company;

    import com.company.victorina.Answer;
    import com.company.victorina.Question;

    import java.util.Arrays;
    import java.util.Optional;
    import java.util.Scanner;

    public class Test {

        public static void main(String[] args) {
            Optional<Question> question =
                   Optional.of(new Question(
                            "1",
                            Arrays.asList(new Answer(1, "an_1", null), new Answer(2, "an2", null))
                    ));
            while (question.isPresent()) {
                System.out.println(question.toString());
                int idEvent = (new Scanner(System.in)).nextInt();
                question = question.get().getAnswers().get(idEvent - 1).getNext();
            }
        }
    }
}

Улучшения - развернуть liquibase под наш проект

EventList -> подумать об улучшении или замене